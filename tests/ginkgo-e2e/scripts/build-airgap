#!/bin/bash

# Build Airgap

set -vx

# Error function
function error() {
  echo -e "$@" >&2
  exit 1
}

# Retry helm command in case of sporadic issue
function RunHelmCmdWithRetry() {
  # Wait for a maximum of 1 minute
  for ((i = 0; i < 60; i++)); do
    # If helm command is OK then we simply return (exit the function)
    helm $* && return

    # Wait a little
    sleep 5
  done

  # If we are here then an error happened!
  exit 1
}

# Retry skopeo command in case of sporadic issue
function RunSkopeoCmdWithRetry() {
  CMD=$*

  # Wait for a maximum of 1 minute
  for ((i = 0; i < 60; i++)); do
    # If skopeo command is OK then we simply return (exit the function)
    ERRMSG=$(skopeo ${CMD} 2>&1 >/dev/null) && return

    # If resource access is denied retry with local access
    case ${ERRMSG} in
    *requested\ access\ to\ the\ resource\ is\ denied*)
      CMD=${CMD/docker:\/\//docker-daemon:}
      ;;
    *Storing\ signatures\ for\ docker\ tar\ files\ is\ not\ supported*)
      CMD=${CMD/copy/copy --remove-signatures}
      ;;
    esac

    # Wait a little
    sleep 5
  done

  # If we are here then an error happened!
  exit 1
}

# Variable(s)
K3S_VERSION=$1
KUBEWARDEN_VERSION=latest
KUBEWARDEN_REPO=https://charts.kubewarden.io
DEPLOY_AIRGAP_SCRIPT=$(realpath ../scripts/deploy-airgap)
OPT_RANCHER="${HOME}/airgap_rancher"
HAULER_BIN=/usr/local/bin/hauler
REPO_SERVER="rancher-manager.test:5000"

# Install hauler
curl -sfL https://get.hauler.dev | HAULER_INSTALL_DIR=$HOME bash
sudo mv $HOME/hauler ${HAULER_BIN}

# Install packages
sudo zypper --no-refresh -n in skopeo yq

# Create directories
mkdir -p ${OPT_RANCHER}/{k3s,helm} ${OPT_RANCHER}/images/registry
cd ${OPT_RANCHER}

# Add rancher manager in /etc/hosts
sudo sh -c "echo '192.168.122.102 ${REPO_SERVER%:*}' >> /etc/hosts"

# Download k3s
K3S_URL=https://github.com/k3s-io/k3s/releases/download/$K3S_VERSION
for i in k3s-airgap-images-amd64.tar.zst k3s; do
  curl -sL ${K3S_URL}/${i} -o ${OPT_RANCHER}/k3s/${i}

  # Get the install script
  curl -sfL https://get.k3s.io -o ${OPT_RANCHER}/k3s/install.sh

  # Get the airgap deploy script
  cp ${DEPLOY_AIRGAP_SCRIPT} ${OPT_RANCHER}/k3s
done

# Add k3s artifacts to hauler
${HAULER_BIN} store add file ${OPT_RANCHER}/k3s

# Get Helm Charts
cd ${OPT_RANCHER}/helm/

# Add repos
RunHelmCmdWithRetry repo add kubewarden ${KUBEWARDEN_REPO} >/dev/null 2>&1
RunHelmCmdWithRetry repo update >/dev/null 2>&1

# Get Kubewarden charts
[[ "${KUBEWARDEN_VERSION}" == "latest" ]] &&
  DEVEL="--devel" ||
  unset DEVEL
for i in kubewarden-crds kubewarden-controller kubewarden-defaults; do
  RunHelmCmdWithRetry pull ${DEVEL} kubewarden/${i} >/dev/null 2>&1
done

# Extract image and policy files list
tar -xvzf kubewarden-controller* kubewarden-controller/imagelist.txt
tar -xvzf kubewarden-defaults* kubewarden-defaults/{imagelist.txt,policylist.txt}
# Remove registry from policylist.txt
sed -i 's|^registry://||' ${OPT_RANCHER}/helm/kubewarden-defaults/policylist.txt

# Get container images
cd ${OPT_RANCHER}/images/

# Add helm charts to hauler store
cd ${OPT_RANCHER}
${HAULER_BIN} store add chart ./helm/kubewarden-crds-* --repo .
${HAULER_BIN} store add chart ./helm/kubewarden-controller-* --repo .
${HAULER_BIN} store add chart ./helm/kubewarden-defaults-* --repo .

# Add images to hauler store
for i in $(<${OPT_RANCHER}/helm/kubewarden-controller/imagelist.txt) \
  $(<${OPT_RANCHER}/helm/kubewarden-defaults/policylist.txt)         \
  $(<${OPT_RANCHER}/helm/kubewarden-defaults/imagelist.txt); do
  hauler store add image ${i} --platform linux/amd64
done

## Skopeo - Registry
# We need this image to build our internal registry
RunSkopeoCmdWithRetry copy --additional-tag registry:latest docker://registry:latest docker-archive:registry.tar
${HAULER_BIN} store add file registry.tar

# Export the hauler store
${HAULER_BIN} store save --platform linux/amd64
